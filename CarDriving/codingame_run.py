import ast
import json
import math
import sys
from copy import deepcopy

import numpy as np

MAX_SPEED = 200
HEIGHT = 9000
WIDTH = 16000
CHECKPOINT_RADIUS = 600
nn_data = '{"Layer 0": {"name": "dense", "trainable": true, "dtype": "float32", "batch_input_shape": [null, 6], "units": 32, "activation": "relu", "use_bias": true, "kernel_initializer": {"class_name": "GlorotUniform", "config": {"seed": null}}, "bias_initializer": {"class_name": "Zeros", "config": {}}, "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}, "Weights 0:0": "[[0.36401, 0.04134, 0.34327, 0.23016, -0.42242, -0.51345, -0.05398, 0.41807, 0.4145, -0.27551, 0.13622, -0.34827, -0.04443, -0.34251, 0.19157, 0.21346, -0.15074, -0.34548, -0.1388, -0.40869, 0.24562, 0.09268, 0.09493, 0.24855, -0.24045, 0.33028, -0.10418, -0.1157, 0.33017, -0.0441, 0.33585, 0.4305], [0.22471, 0.17158, -0.33568, -0.05831, 0.4539, 0.27279, -0.08949, -0.2063, -0.08662, 0.01282, 0.21317, 0.13716, -0.30528, -0.11663, -0.21052, 0.36659, 0.1626, 0.32016, 0.02015, 0.17561, 0.00863, -0.32388, 0.36849, 0.17774, 0.36082, 0.27338, 0.38199, 0.09352, 0.23416, 0.22984, -0.34193, 0.04451], [-0.39494, -0.30081, -0.34227, -0.35555, -0.0676, -0.4243, 0.35958, -0.19573, -0.36101, 0.40405, 0.47084, -0.03203, -0.19646, -0.02289, 0.05794, 0.05943, 0.24546, -0.69131, -0.50955, -0.39098, -0.04258, -0.1855, 0.34091, -0.437, 0.38125, 0.22699, -0.18272, -0.22791, 0.32833, -0.39334, 0.57339, -0.44198], [-0.44808, -0.33349, 0.0404, -0.2012, 0.18933, 0.40513, 0.11061, 0.65977, 0.22556, 0.42349, 0.22258, 0.29928, -0.27606, -0.2792, -0.02075, -0.20163, -0.01339, 0.15253, 0.18787, 0.16833, -0.16487, 0.09235, 0.32365, -0.00176, -0.15646, -0.01197, 0.08884, -0.38609, 0.3565, 0.58817, -0.13002, -0.28694], [-0.05169, 0.24454, 0.10809, -0.06053, 0.28445, 0.15181, 0.47423, -0.05012, -0.12373, 0.30341, -0.13139, -0.19532, 0.05438, -0.14168, -0.37001, -0.36016, -0.15, 0.18485, 0.15262, 0.45676, -0.09511, -0.04965, -0.18031, -0.09931, -0.08652, -0.25426, 0.45667, -0.23539, -0.31477, -0.49907, -0.00687, 0.22098], [0.453, -0.39403, -0.25122, -0.23413, -0.375, -0.26923, -0.39516, -0.59526, 0.2809, -0.33555, -0.12797, -0.26379, 0.35121, 0.23639, -0.38203, 0.63207, 0.21602, 0.047, 0.35624, 0.3028, -0.20382, 0.33858, 0.22864, -0.14641, 0.08447, -0.2729, 0.17006, -0.00996, -0.33803, 0.17123, -0.07607, -0.49005]]", "Weights 0:1": "[0.14088, 0.1784, 0.0, 0.0, -0.12522, 0.07633, -0.12049, -0.01286, 0.1048, -0.10675, -0.13756, -0.04187, 0.0, 0.0, 0.0, -0.13506, -0.08463, 0.03705, 0.09483, -0.09893, -0.01786, 0.0, -0.17614, 0.10659, -0.13935, -0.14479, -0.22781, 0.0, -0.17318, 0.20534, -0.04921, 0.1524]", "Layer 1": {"name": "dense_1", "trainable": true, "dtype": "float32", "units": 64, "activation": "relu", "use_bias": true, "kernel_initializer": {"class_name": "GlorotUniform", "config": {"seed": null}}, "bias_initializer": {"class_name": "Zeros", "config": {}}, "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}, "Weights 1:0": "[[0.28004, -0.08089, 0.06103, 0.17723, 0.0843, -0.19559, -0.1294, 0.0021, 0.39344, -0.17346, 0.16125, -0.08809, -0.19085, -0.22738, -0.04241, -0.11835, 0.24655, 0.13146, 0.02903, -0.05878, -0.17373, 0.13379, 0.06085, -0.22119, -0.21995, -0.11072, -0.30739, -0.08099, 0.14922, -0.83405, 0.15593, 0.10756, -0.09922, 0.07833, -0.19454, 0.10875, -0.20743, 0.01138, 0.0945, -0.07665, 0.12493, 0.13011, 0.39858, 0.12018, -0.07353, 0.20223, 0.15393, 0.35854, -0.26194, 0.42305, 0.1907, 0.02091, 0.09195, -0.49177, -0.30071, 0.17559, 0.09027, -0.2872, 0.33998, -0.06602, -0.11533, 0.06258, 0.09558, 0.01264], [0.59635, 0.39219, 0.29448, 0.43613, 0.11007, -0.07704, -0.52366, -0.43201, 0.42172, 0.16383, 0.04174, 0.18195, -0.14998, -0.28186, -0.0427, -0.06032, 0.50695, -0.29214, 0.04272, 0.2048, -0.1195, 0.09814, -0.19573, -0.20297, -0.14457, -0.17452, -0.36709, -0.28238, 0.11445, 0.10666, -0.23336, -0.13905, 0.26034, 0.13574, -0.05725, -0.20338, 0.00462, 0.04183, 0.52724, 0.0174, 0.14883, 0.02813, 0.09883, -0.0428, -0.24912, 0.07993, -0.12703, 0.29782, 0.39761, 0.09556, 0.43869, 0.16019, 0.00267, 0.15089, 0.25869, 0.11791, 0.07419, 0.22638, 0.30559, 0.47174, -0.35856, -0.25754, 0.03447, -0.4809], [-0.17371, -0.02703, -0.24237, 0.03749, -0.20463, 0.03513, -0.15484, -0.23671, 0.16117, -0.08851, -0.11169, -0.14953, 0.17122, -0.21517, -0.24507, -0.19007, 0.01741, -0.04614, -0.18078, 0.24806, -0.23857, 0.06657, 0.11029, 0.13103, -0.21714, 0.16824, -0.22265, 0.18754, 0.15082, -0.18739, 0.0915, 0.11095, 0.12545, -0.18036, -0.00521, 0.15167, -0.05194, 0.24252, 0.24822, -0.13018, -0.01148, 0.003, -0.01751, -0.13321, 0.17042, 0.11625, -0.02994, 0.00455, -0.11388, 0.20821, 0.23735, -0.11479, 0.11449, -0.04612, 0.2322, -0.08432, 0.0394, 0.11528, 0.09829, -0.04516, -0.05097, 0.12728, 0.0484, 0.18771], [0.12074, 0.00656, 0.14797, -0.11891, 0.16926, -0.1999, 0.14191, -0.16486, 0.02538, -0.21674, -0.2392, -0.14447, 0.16731, 0.14405, -0.06517, 0.00314, -0.01211, 0.16452, -0.23492, -0.19331, -0.16818, 0.23407, -0.11256, 0.13832, -0.08831, -0.03938, -0.13644, -0.15958, -0.11397, 0.20968, 0.06377, 0.06881, -0.10825, -0.05555, 0.14888, -0.20303, 0.24381, -0.1233, 0.19118, -0.12657, 0.12991, 0.09686, -0.04562, -0.21537, 0.00091, -0.13736, -0.00787, 0.02251, 0.22698, -0.13556, -0.00205, -0.00942, -0.23671, -0.07708, 0.01835, 0.06823, 0.20577, -0.0214, -0.15853, -0.18414, -0.10626, -0.07949, 0.12599, -0.23441], [-0.06477, -0.08253, -0.10562, -0.23611, -0.06256, 0.06426, 0.39865, -0.15223, 0.09029, -0.02463, 0.32633, 0.06195, -0.20506, 0.41006, -0.20505, 0.25735, -0.0919, -0.64957, -0.04971, -0.10326, 0.34113, 0.3052, 0.42462, 0.36717, -0.033, 0.02991, -0.05476, 0.42015, -0.16541, 0.34365, -0.03555, -0.17621, -0.22987, 0.3389, 0.32804, -0.25044, 0.02588, 0.37831, -0.21219, -0.23975, 0.03259, -0.22874, -0.00423, -0.12411, 0.13258, 0.19172, -0.24897, 0.09776, -0.29365, -0.28085, 0.12765, 0.15015, 0.03285, 0.02758, 0.28467, -0.15611, 0.01601, 0.06179, -0.03515, -0.04107, 0.03429, -0.34898, -0.01454, 0.29025], [0.39802, -0.11038, -1.10553, -0.34859, -0.19641, -0.08525, 0.33123, -0.82967, -0.24541, 0.03689, 0.25008, 0.03295, -0.03561, 0.35761, 0.06134, 0.10565, 0.00362, -0.66934, -0.1364, -0.28024, 0.36942, -0.38909, 0.28001, 0.13571, 0.81205, -0.15984, 0.40958, 0.66381, -0.03685, 0.39576, -0.85704, -0.19827, -0.28635, 0.1189, 0.62638, 0.10502, -0.09757, 0.06846, 0.24184, -0.01393, -0.09679, -0.12864, 0.11284, 0.058, -0.23959, -0.24388, 0.12001, -0.27389, -0.35105, -0.06592, -0.36639, -0.20613, -0.17674, -0.07513, -0.5589, -0.06885, -0.17654, -0.18167, -0.30916, -0.66702, 0.53452, -0.67953, -0.49399, 0.32213], [0.06227, -0.14524, 0.46558, 0.17172, -0.08353, -0.05474, 0.03987, 0.15553, -0.13095, -0.07799, 0.14817, 0.12972, -0.21585, 0.07887, -0.24771, 0.27333, 0.11116, -0.40631, 0.09306, 0.25068, -0.08846, -0.02757, 0.12826, 0.00761, -0.46348, -0.18183, 0.12501, 0.08449, -0.18103, 0.38908, 0.27283, 0.16592, -0.05466, -0.23654, -0.1661, 0.07611, -0.04724, 0.16942, -0.00593, 0.09764, 0.14162, 0.21367, -0.07535, 0.15522, -0.01432, 0.07525, 0.1565, -0.11896, 0.11544, -0.29985, -0.01121, -0.02222, 0.17128, 0.32336, 0.19032, -0.02324, 0.07938, 0.05794, 0.14644, 0.18465, 0.23947, 0.21324, 0.04152, 0.0865], [-0.0819, 1.06132, -0.00727, 0.7471, 0.36165, -0.10118, -0.42815, -0.50284, 0.52799, -0.13981, -0.85601, 0.12552, 0.15029, 0.04309, -0.0176, 0.73737, -0.27192, -0.77993, -0.03341, 0.81847, -0.14253, 0.60831, -0.85785, 0.16495, -0.92052, 0.03263, -0.38035, -0.36878, 0.16341, 0.78801, -0.27764, 0.10076, 0.70886, -0.14176, -0.37552, 0.11446, 0.11457, -0.05038, 0.44726, 0.51325, 0.08834, -0.21042, 0.40939, 0.19271, -0.03865, 0.20804, -0.1566, 0.61087, 1.10354, 0.0727, 0.63642, 0.2417, 0.00803, 0.70203, 0.25942, 0.86458, -0.07089, 1.11035, 0.29165, 0.90993, -0.15009, -0.16416, -0.26426, -0.79347], [0.06845, 0.24082, -0.29909, 0.26336, 0.33348, 0.03562, 0.09485, -0.31219, 0.26728, 0.16152, 0.15242, 0.14467, 0.02069, 0.06603, -0.19881, 0.19078, 0.2176, 0.24549, 0.04003, 0.15898, -0.21202, 0.10395, -0.26007, -0.15327, -0.20389, 0.08216, 0.06572, 0.1315, 0.00206, -0.46678, 0.19535, -0.22158, -0.06, 0.1059, -0.03877, -0.19982, -0.01743, -0.02796, 0.28824, 0.1436, -0.24562, -0.1919, 0.11522, 0.0583, -0.11674, -0.1757, 0.2276, 0.17313, 0.20123, 0.35202, 0.27998, 0.20912, 0.01782, -0.37999, -0.33738, 0.05501, 0.2228, -0.05127, 0.0067, -0.05486, 0.0977, -0.08686, -0.2332, -0.25719], [-0.23185, -0.17356, 0.43011, -0.05226, -0.12829, 0.00935, 0.14932, 0.08712, 0.01523, -0.18401, 0.00272, -0.24318, 0.0583, 0.20494, -0.18212, 0.2911, 0.03517, -0.28771, -0.17221, 0.07454, 0.04892, 0.21619, 0.03971, 0.45367, -0.00631, -0.18193, 0.27272, -0.08642, -0.02511, 0.29713, -0.10191, -0.06542, -0.25439, -0.11596, 0.27578, -0.07401, -0.01509, -0.24443, -0.20757, -0.01499, 0.08038, -0.14711, 0.02712, -0.08801, -0.01035, 0.10863, 0.22399, -0.22508, -0.06068, -0.30122, -0.22233, -0.28574, -0.11765, 0.4435, 0.39425, 0.02786, -0.08747, -0.00194, 0.0062, 0.04507, 0.04493, 0.21043, -0.09557, 0.34045], [-0.35988, 0.07116, 0.16406, 0.2176, 0.04518, 0.14151, 0.22964, 0.36113, -0.16727, -0.24689, 0.26761, -0.07248, -0.01841, 0.22057, -0.06722, 0.45072, 0.12684, 0.06997, 0.05854, 0.18379, 0.22, 0.10012, 0.20959, 0.11302, 0.29751, -0.09827, 0.25655, 0.08555, -0.20286, 0.22837, 0.08554, -0.20168, 0.17633, 0.25551, -0.07822, 0.17419, 0.11535, 0.25527, -0.07686, -0.26635, -0.0614, 0.19927, 0.10639, 0.09538, -0.09646, 0.17236, -0.16696, -0.03825, 0.21104, -0.02271, -0.11101, 0.08831, -0.00374, -0.04893, 0.25047, -0.10611, -0.04927, 0.25561, -0.08933, -0.16603, -0.16606, -0.05421, 0.16658, -0.04112], [-0.07479, -0.1399, -0.15481, -0.10977, 0.19981, -0.13173, -0.20616, -0.22694, 0.18031, 0.0436, 0.22095, 0.07615, 0.11684, 0.12309, 0.24808, -0.15613, -0.21338, -0.06955, 0.02836, -0.23746, 0.03906, 0.04641, -0.22225, -0.08528, -0.03704, -0.00865, -0.07177, 0.20138, -0.19261, -0.1954, 0.0579, -0.10921, 0.1742, -0.24014, 0.14252, 0.15473, 0.18371, 0.0137, -0.17825, 0.10435, -0.12673, -0.14493, -0.13804, -0.24808, -0.1442, 0.03712, 0.20514, 0.12877, 0.15867, -0.24479, 0.08793, -0.08161, -0.16078, -0.24047, 0.08959, -0.02897, 0.04366, -0.1831, 0.08337, -0.08713, -0.22205, -0.19629, -0.20658, 0.01614], [-0.16684, -0.0254, 0.01727, -0.09778, 0.14822, 0.01117, 0.19257, -0.20734, -0.04071, -0.23718, -0.04716, 0.06029, 0.09311, 0.01086, -0.18867, 0.14299, -0.07771, -0.14477, -0.10987, 0.24279, 0.0252, 0.14369, -0.0065, -0.12843, 0.02132, -0.20095, 0.15588, 0.14984, -0.21977, 0.11307, -0.22328, -0.08613, 0.24363, -0.13769, 0.1222, -0.12668, 0.17602, 0.18908, -0.03983, -0.04923, -0.07811, 0.23808, 0.02011, -0.01635, -0.12115, 0.04278, -0.22248, 0.03564, 0.19258, 0.05149, -0.00697, -0.09408, -0.19353, 0.03751, 0.19328, 0.11651, 0.15285, 0.09583, 0.12981, -0.11184, 0.15155, -0.18556, -0.24493, -0.188], [0.07761, 0.13799, -0.07303, -0.23862, 0.11472, -0.01212, 0.06869, -0.11149, -0.20227, 0.13021, -0.19266, 0.22642, 0.16787, 0.1109, 0.20006, 0.14748, -0.14082, 0.08781, -0.2229, 0.14553, -0.19557, 0.21743, 0.22393, -0.04479, 0.24737, 0.12266, -0.18221, -0.0296, -0.07228, 0.00674, -0.14201, 0.00805, 0.14134, 0.11358, -0.1982, -0.10595, 0.13715, 0.14919, -0.1305, 0.18286, -0.19376, -0.21904, 0.1273, -0.00448, 0.15491, -0.16555, -0.24481, 0.1302, 0.10588, 0.09201, 0.14199, 0.04239, 0.17301, -0.07001, 0.14127, -0.1664, -0.13534, 0.00229, 0.13439, -0.11228, -0.11669, 0.051, -0.01344, -0.12457], [-0.11255, -0.06955, -0.16999, 0.00256, -0.15291, -0.09925, 0.02835, 0.15722, -0.20532, 0.18137, 0.18851, 0.10597, 0.13097, 0.16395, -0.04665, -0.17896, -0.23812, -0.16742, 0.18878, 0.06991, 0.09618, 0.08851, 0.01234, 0.19513, -0.18321, 0.03284, -0.08366, 0.12397, 0.14597, 0.10032, 0.11763, 0.16287, 0.03438, -0.13898, -0.24434, 0.23967, -0.06721, 0.00459, 0.02556, -0.21344, -0.05002, 0.0134, -0.13409, -0.13692, 0.11219, 0.04652, 0.18261, -0.16536, 0.155, 0.00398, 0.04286, -0.08511, 0.19344, -0.09248, -0.1203, 0.20659, 0.23729, 0.09943, -0.02886, 0.17225, -0.22896, -0.02031, 0.19686, -0.10872], [-0.37443, -0.32378, -0.1357, 0.23523, 0.17365, -0.07047, 0.22565, 0.03953, 0.16703, 0.22473, -0.14501, -0.0698, -0.04024, -0.24089, -0.23013, 0.23383, -0.24982, 0.19792, -0.13318, -0.13746, 0.1956, 0.13401, 0.04869, -0.22348, 0.14672, 0.10387, -0.15087, 0.14811, -0.05115, -0.58014, 0.15438, -0.10464, 0.00449, 0.23062, 0.35739, -0.20489, 0.0826, 0.12678, -0.24176, 0.1111, 0.05794, -0.05073, -0.09607, -0.07608, -0.21282, -0.04652, -0.23466, -0.1635, -0.35316, 0.06244, -0.04527, 0.05556, -0.23654, -0.42338, 0.00374, -0.05166, -0.18196, -0.18895, 0.10311, 0.04173, 0.09527, 0.2602, -0.05808, 0.38254], [-1.04011, 0.06914, 0.02318, -0.16977, -0.21626, 0.14846, 0.31334, 0.09379, -0.28822, -0.06646, 0.12008, -0.01008, -0.22171, 0.10652, -0.09813, 0.25708, 0.07344, 0.38084, -0.10602, -0.02058, 0.19275, -0.22573, 0.01929, -0.2775, 0.25013, 0.00383, 0.11018, 0.38203, -0.21574, -0.20129, 0.11426, 0.00572, -0.20733, 0.0754, 0.32233, -0.18439, -0.01065, 0.01449, -0.37217, -0.254, 0.05053, -0.23353, -0.21799, 0.06999, 0.19081, -0.03521, -0.08795, -0.17911, -0.30116, -0.41454, -0.38393, -0.27413, 0.03413, 0.116, -0.49678, -0.28592, 0.1672, 0.17885, -0.17294, -0.14245, -0.07528, -0.01767, 0.14369, 0.35196], [0.95411, -0.37162, -0.90956, -0.59648, -0.62066, -0.24624, 0.51776, -0.56448, -0.48848, 0.04912, 0.1239, 0.22795, 0.05004, 0.57819, -0.04857, 0.26352, -0.08003, -0.22339, 0.23003, -0.61024, 0.33374, -0.69511, 0.10553, 0.82755, 1.90614, -0.20554, 0.55291, 0.59297, -0.00562, 0.14113, -0.15948, -0.16122, -0.78689, 0.30259, 0.76392, 0.01267, 0.10455, -0.08224, -0.20386, 0.0391, -0.20224, -0.24783, 0.05137, 0.00236, 0.01769, 0.12912, -0.21827, -0.84758, -0.52393, 0.14781, -0.82412, 0.16952, -0.11963, -0.10644, -0.0931, -0.69423, 0.11876, -1.17321, -0.29042, -0.29203, 0.69083, -0.35592, -0.27053, 0.76226], [0.42895, 0.14368, -0.22327, -0.02624, 0.28896, 0.0612, -0.25294, -0.31084, 0.00497, -0.14551, -0.13, 0.13025, -0.21576, -0.13538, 0.19315, -0.42007, 0.03084, -0.05292, -0.23342, -0.5194, 0.03924, -0.45599, -0.16531, 0.29965, -0.10175, 0.22114, 0.15387, -0.14155, 0.17834, -0.34267, 0.18781, -0.04543, -0.02079, 0.22904, -0.06024, -0.09761, -0.04595, -0.09616, 0.03453, 0.55486, 0.21121, 0.06667, 0.38166, -0.16413, -0.2358, -0.07797, -0.01298, -0.24142, 0.11703, 0.48395, 0.11159, 0.17135, 0.08011, -0.24013, -0.65858, 0.08951, -0.06493, -0.62935, -0.10686, 0.1372, -0.13978, -0.40978, -0.59657, -0.23487], [0.56192, 0.09282, 0.14695, -0.21874, 0.14675, -0.08038, 0.16107, -0.45541, -0.01483, -0.06558, -0.0779, -0.04209, 0.06895, -0.10477, -0.17231, -0.04654, -0.25234, -0.47107, -0.20681, 0.05695, -0.15941, 0.10224, 0.12949, 0.37151, -0.52538, -0.19234, -0.21022, 0.22803, -0.11114, -0.15237, 0.27372, 0.16651, 0.0861, 0.31135, 0.1722, 0.01471, 0.19577, 0.54286, 0.06491, 0.52665, 0.05278, -0.16879, 0.24502, 0.16446, -0.21368, 0.08383, 0.1946, 0.08735, -0.12129, 0.41062, 0.10619, 0.31138, -0.20584, -0.38349, -0.46126, 0.04552, 0.11334, -0.61714, 0.30165, -0.1317, 0.02133, -0.03599, -0.96211, 0.3056], [0.06003, -0.14419, -0.14717, 0.19409, 0.2383, 0.05536, 0.20459, -0.12818, -0.11919, -0.12433, 0.13862, 0.06867, 0.14472, -0.18262, 0.19, 0.1876, 0.22344, 0.17937, -0.0455, 0.09175, -0.08043, 0.07108, -0.20811, -0.0177, -0.15338, 0.22921, 0.2215, 0.15488, -0.2502, 0.23999, 0.21295, -0.18399, -0.22824, -0.19106, -0.00469, -0.09043, -0.06948, -0.03283, 0.05737, 0.02857, 0.17653, -0.21229, -0.24848, 0.00959, 0.18358, -0.04722, 0.09812, 0.10006, 0.22914, -0.11558, -0.21684, -0.15792, -0.02817, -0.0305, -0.23457, -0.17792, 0.22248, -0.01667, 0.24281, 0.20762, 0.19189, 0.1015, -0.11158, 0.16164], [-0.17788, 0.17242, -0.08826, 0.17564, -0.18365, -0.15014, 0.23154, 0.17953, 0.11126, -0.23236, -0.24479, -0.0139, 0.10165, -0.19298, -0.20068, 0.02977, 0.00819, 0.02823, -0.01456, 0.06429, -0.15002, 0.24593, -0.13204, 0.14816, 0.14438, 0.03173, 0.23195, -0.22763, -0.10135, 0.2029, -0.1055, 0.13183, 0.17767, -0.06966, -0.17242, -0.21344, 0.24272, -0.10743, 0.14999, 0.08255, 0.23141, 0.11125, -0.13099, 0.22419, 0.13378, -0.18021, 0.23456, -0.09152, 0.14212, 0.14022, -0.05316, 0.12583, -0.21421, 0.12555, -0.09462, -0.13174, 0.07521, 0.22615, -0.10402, -0.21186, -0.04697, 0.16107, -0.07842, 0.01543], [-0.46063, -0.0318, -0.01679, -0.03034, -0.27103, -0.13168, 0.16172, 0.26536, -0.20724, -0.04586, -0.1894, -0.25777, -0.11498, 0.0488, -0.17966, 0.14981, -0.24982, 0.1985, -0.16695, 0.09159, -0.12409, 0.12857, 0.24802, -0.0484, -0.07467, -0.06711, 0.00747, 0.23639, -0.07434, -0.08834, -0.21926, -0.02873, 0.03773, 0.21815, 0.20537, -0.21323, -0.23729, 0.15853, 0.17668, -0.13138, -0.09726, 0.11312, 0.00879, -0.09139, -0.16924, -0.15868, 0.11171, 0.07688, 0.12183, 0.03541, 0.14746, -0.32142, -0.02316, 0.09661, -0.05792, -0.10476, 0.13124, -0.0112, 0.11053, -0.06734, 0.26309, 0.35014, -0.06025, 0.17809], [0.60402, 0.23042, -0.06417, 0.03585, 0.29112, 0.21282, 0.10821, -0.02347, -0.04867, -0.22567, 0.26599, 0.18011, -0.13664, -0.15467, -0.11376, 0.07443, 0.16082, -0.02791, 0.03169, 0.10811, -0.00894, -0.04399, 0.22353, 0.05437, 0.32364, -0.06356, 0.09571, 0.12739, 0.28928, -0.40599, -0.50895, -0.03397, -0.17362, 0.02494, -0.08124, 0.15035, 0.18609, 0.05426, 0.02756, -0.18594, 0.16977, -0.02756, 0.18559, -0.10216, -0.23045, 0.05549, 0.22147, 0.20486, -0.16929, 0.32107, 0.32571, 0.19626, 0.0104, -0.2423, 0.05794, -0.10263, 0.21526, 0.12802, -0.0607, -0.08248, 0.06723, -0.47243, -0.01878, 0.2021], [-0.17255, -0.14012, 0.05398, -0.17274, -0.23705, 0.19322, 0.39933, 0.19847, 0.10962, -0.24993, 0.3306, 0.04569, -0.23191, 0.22864, 0.0198, 0.33903, 0.1152, 0.00021, -0.13647, 0.08528, 0.29712, -0.08752, 0.30915, 0.04693, 0.015, -0.13016, -0.00692, 0.34903, -0.10679, -0.13392, 0.09794, 0.09144, 0.02206, 0.23485, -0.0024, 0.04352, -0.18617, -0.06733, 0.02454, -0.37194, -0.00136, -0.0524, -0.35062, 0.01448, -0.05504, -0.24761, -0.1806, 0.06364, -0.29669, -0.19181, -0.12469, 0.09248, -0.19187, 0.14841, -0.02215, -0.16962, 0.06655, 0.19124, -0.01764, -0.29168, 0.18957, -0.00276, 0.08952, 0.41884], [-0.58013, -0.05622, -0.11569, -0.15652, -0.30151, 0.09046, 0.29562, 0.26687, -0.17968, 0.03044, -0.02307, 0.10382, -0.08693, 0.15044, -0.03265, 0.48136, -0.08745, 0.14643, 0.15776, -0.07586, 0.24481, 0.40672, -0.11796, -0.08567, 0.34663, 0.18974, 0.12315, 0.24222, 0.05997, 0.01668, -0.47086, -0.11224, 0.22334, -0.09086, 0.01171, 0.00367, -0.15122, -0.0917, -0.18101, -0.27875, -0.06474, -0.04192, -0.12618, 0.13495, -0.04781, -0.25961, -0.21814, 0.28363, 0.10611, -0.10442, 0.2357, 0.10968, 0.18102, 0.31337, 0.25926, 0.26752, -0.07128, 0.25793, -0.05557, 0.15309, 0.02911, 0.12297, 0.26691, 0.32169], [0.26452, -0.09685, 0.14152, -0.04337, 0.02162, -0.13902, 0.32787, 0.29395, 0.18859, 0.15212, 0.11179, -0.10061, 0.02201, 0.20382, -0.07321, 0.35189, 0.11019, -0.26257, -0.15913, 0.18073, 0.26946, 0.0464, 0.3435, 0.09477, -0.04888, 0.02136, 0.1891, -0.09174, 0.20722, 0.17436, -0.11546, 0.00314, 0.06891, -0.04241, 0.25216, 0.17346, 0.1423, 0.36601, -0.20165, 0.30858, -0.1554, -0.10818, 0.15494, -0.14313, -0.1149, -0.15657, -0.15967, 0.23776, -0.07411, -0.15112, 0.07542, 0.0251, 0.03131, 0.04635, -0.0744, 0.16945, -0.15578, -0.37655, 0.03681, -0.00225, 0.14901, -0.04463, 0.08729, 0.17875], [-0.16428, 0.13753, 0.0795, 0.08868, -0.09948, -0.22226, 0.0639, 0.05141, -0.10685, -0.09808, 0.23702, 0.10117, -0.10774, -0.2131, 0.21321, 0.02198, 0.11502, 0.23936, 0.22886, -0.08521, 0.1818, 0.11689, 0.18533, -0.10789, -0.01311, 0.01748, 0.20851, 0.08251, -0.04524, 0.05406, -0.12367, -0.10542, -0.01215, -0.01419, 0.1085, 0.02079, -0.1906, 0.00603, -0.11455, 0.02549, 0.11314, -0.18241, 0.0537, 0.09693, 0.14813, -0.18925, -0.20091, 0.01221, 0.08913, 0.17882, 0.14229, -0.22637, -0.14838, 0.15633, 0.16835, 0.1, 0.12827, -0.09334, 0.23996, -0.20634, 0.00429, -0.10742, -0.00969, -0.07014], [-0.46849, 0.13531, 0.06181, 0.17532, 0.13154, -0.18743, 0.28151, -0.02678, 0.00075, -0.04311, 0.20497, 0.21428, 0.23399, -0.02777, 0.15729, 0.47592, -0.01239, -0.08804, 0.10717, 0.07074, 0.07278, 0.24054, 0.23061, -0.16533, 0.30683, -0.1081, 0.05682, 0.25272, -0.28243, 0.41938, -0.06985, 0.12428, 0.08884, 0.13325, 0.14297, -0.10146, -0.04436, -0.18369, -0.12541, 0.00199, -0.14743, -0.20817, 0.18695, 0.00419, 0.05366, -0.03523, -0.2453, 0.07291, -0.00215, -0.07236, -0.09962, 0.10428, -0.24831, 0.37817, 0.07717, 0.22078, -0.23039, 0.32799, 0.16427, 0.20572, -0.08271, 0.31681, 0.02205, 0.10662], [-0.01903, 0.17971, -0.6378, 0.00859, 0.08338, 0.12878, -0.10054, -0.24744, 0.21678, -0.22886, 0.19218, -0.14021, 0.28099, -0.06924, 0.19371, 0.11598, 0.03069, 0.2538, -0.22852, -0.3375, -0.05255, -0.55122, 0.10887, 0.25191, 0.55623, 0.05299, -0.10283, -0.05641, 0.11718, 0.51549, -0.16548, -0.0784, 0.24715, -0.23174, 0.05393, 0.10353, -0.07469, -0.53127, 0.49792, 0.17042, -0.0148, -0.13022, -0.12718, -0.24677, 0.04715, -0.18234, 0.03986, -0.31576, 0.32465, 0.3458, -0.36551, -0.07898, -0.18796, 0.36031, -0.70265, 0.23407, -0.20385, 0.46218, 0.22188, 0.25656, 0.18805, -0.48403, -0.0612, -0.15949], [-0.647, -0.39175, 0.75082, -0.89582, -0.621, 0.24336, 0.30155, 0.64824, -0.96507, -0.03492, 0.29734, 0.07942, 0.00594, 0.78539, 0.198, -0.02424, -0.14739, 0.08137, -0.16998, -0.21816, 0.72004, -0.61558, 0.17836, 0.62301, 0.0457, -0.1218, 0.9032, 0.48686, -0.26329, 0.46875, 0.63399, -0.24376, -0.92546, -0.34368, 0.52347, 0.0509, 0.05987, -0.74165, -0.41528, -0.76518, 0.16072, -0.1444, -0.20326, -0.17031, -0.2327, 0.21486, -0.22843, -0.62097, 0.21333, -0.20172, -1.35012, -0.23212, 0.1465, -0.14801, 0.4183, -0.82658, 0.15049, -0.26759, -0.56587, -0.28044, 0.41632, 0.72914, 0.79183, 0.44814], [0.49837, 0.18635, 0.10657, 0.20561, 0.50879, -0.15759, -0.52256, -0.14605, 0.05799, -0.14691, -0.4435, -0.16705, -0.15415, -0.20163, 0.23298, -0.19751, 0.1081, 0.02022, -0.10507, 0.05753, -0.24914, 0.22495, -0.07181, -0.30827, -0.08493, -0.10322, -0.2814, -0.42353, -0.10859, -0.26594, -0.01121, 0.24645, 0.36592, 0.08831, -0.48856, 0.01353, -0.21217, 0.09501, 0.09457, 0.19008, 0.23077, 0.17392, 0.35153, -0.21746, -0.03481, -0.13203, -0.16849, 0.04149, 0.13545, 0.44914, 0.15503, 0.55561, -0.15155, 0.12538, 0.55738, -0.02927, 0.03986, 0.06432, 0.22271, 0.42119, -0.0513, 0.01756, 0.43728, -0.40931]]", "Weights 1:1": "[-0.05594, 0.07369, -0.05564, 0.10261, 0.11231, -0.01143, -0.099, -0.07899, 0.15686, 0.0, -0.03416, -0.01348, -0.03477, -0.05594, 0.0, -0.11606, 0.21658, 0.1026, 0.0, -0.06999, -0.10537, -0.0748, 0.02352, 0.00556, -0.06301, 0.0, -0.0249, -0.11765, 0.00745, 0.09507, 0.02709, -0.00654, 0.13555, -0.05557, -0.06922, -0.00722, 0.0, -0.03802, 0.20168, 0.11264, -0.07279, -0.0332, 0.0589, 0.0, 0.0, -0.05382, -0.04031, 0.02418, 0.1522, 0.12739, 0.0605, 0.15683, -0.00648, 0.01093, -0.06339, 0.11784, -0.06552, 0.11557, 0.06129, 0.16509, -0.0944, -0.06998, 0.17223, -0.10967]", "Layer 2": {"name": "dense_2", "trainable": true, "dtype": "float32", "units": 10, "activation": "relu", "use_bias": true, "kernel_initializer": {"class_name": "GlorotUniform", "config": {"seed": null}}, "bias_initializer": {"class_name": "Zeros", "config": {}}, "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}, "Weights 2:0": "[[-0.38171, 0.07816, 0.1465, -0.25384, 0.18309, 0.26555, -1.57657, -2.17907, -0.09061, 1.89116], [-0.28706, -0.28175, -0.17489, -0.0951, 0.01057, 0.18967, -0.95084, -0.11183, -0.01867, 0.05683], [0.42542, -0.13626, 0.27426, 0.19456, -0.11215, -0.25413, 0.3979, 1.28138, -0.12685, -1.13916], [-0.02935, 0.20432, 0.07473, 0.10914, 0.14631, 0.13536, -0.48955, -0.40064, 0.11847, 0.51486], [-0.81469, -0.40064, 0.20324, 0.25506, 0.01503, -0.31187, -0.03411, -0.31346, 0.1773, 0.30224], [-0.29347, 0.11523, -0.24309, -0.23372, -0.25429, 0.09721, -0.32774, 0.25024, -0.04015, -0.24322], [0.05682, 0.3234, -0.28119, 0.11037, 0.10025, 0.34496, 0.26671, 0.31283, 0.10812, -0.19107], [0.77095, 0.08432, 0.19762, -0.12962, 0.0118, -0.0013, 0.52712, 1.13018, -0.18784, -0.76118], [-0.75427, 0.02011, 0.09926, 0.00478, -0.14553, -0.32097, -0.2744, -0.40099, -0.00808, 0.28807], [-0.02382, -0.01093, 0.18008, 0.25364, 0.06271, -0.06301, 0.23096, 0.08982, 0.18277, -0.03376], [-0.09438, 0.30749, 0.23528, -0.25616, 0.22642, -0.22459, 0.35786, 0.11752, 0.05538, -0.00738], [-0.10374, 0.1455, -0.08934, -0.11414, 0.17462, 0.24691, 0.09472, 0.04592, 0.05028, -0.13552], [-0.09164, -0.08703, -0.05493, -0.07638, -0.20806, -0.1742, -0.28196, 0.0175, 0.07241, 0.40635], [0.18488, 0.00796, 0.15637, -0.21155, -0.22578, 0.15522, 0.07747, 0.55302, -0.27328, -0.05874], [-0.23278, 0.27727, -0.21042, 0.1717, -0.07061, -0.19869, -0.04628, 0.10676, 0.03952, -0.04712], [0.08806, -0.15728, -0.16726, -0.00633, -0.24891, 0.41779, 0.07426, 0.33461, -0.18686, 0.29543], [-0.28709, 0.20792, -0.17875, 0.09207, -0.16928, -0.25798, 0.00738, 0.12833, -0.24013, 0.17891], [-0.29218, -0.76139, -0.07339, 0.03952, 0.13798, -1.41023, -0.63038, -0.18895, -0.15323, -0.25028], [0.00534, -0.0268, 0.13839, -0.24644, -0.14568, 0.19495, -0.19823, 0.157, 0.24755, 0.10958], [0.21747, -0.01715, 0.00314, 0.29118, -0.25714, 0.53542, 0.1518, -0.10416, -0.18393, 0.25331], [0.15106, 0.09946, -0.12906, 0.14921, -0.09534, 0.37021, 0.11569, 0.24054, -0.0145, -0.29728], [0.27814, -0.16156, -0.08526, -0.17773, -0.09985, 0.62995, 0.39149, -0.25483, -0.27638, 0.26629], [-0.12957, 0.07948, -0.16347, -0.03077, -0.00647, -0.12371, 0.37555, 0.41905, -0.13478, 0.23488], [-0.06745, -0.40729, -0.1839, -0.10013, 0.05399, 0.01644, 0.06699, 0.69276, -0.27432, -0.2451], [0.23992, -1.84696, -0.13228, 0.04035, 0.03107, -0.45879, 1.25473, 1.34193, -0.15511, -1.94348], [-0.12973, -0.05128, 0.21094, 0.00644, 0.19081, -0.04006, 0.07176, 0.25906, 0.04594, 0.10095], [0.04765, 0.21405, 0.07627, -0.25211, 0.1374, -0.07373, -0.03647, 0.29345, 0.04343, -0.35501], [0.22204, 0.3571, 0.02365, 0.01828, -0.10749, 0.55965, 0.33283, 0.37197, -0.25556, -0.24971], [0.0828, -0.12785, -0.26579, -0.10151, 0.06275, -0.0692, -0.34479, 0.09532, -0.24531, -0.10517], [0.36475, -0.77594, -0.10862, -0.17546, 0.19147, -0.3808, -1.23062, 0.38897, 0.0365, 0.04404], [-0.33252, -0.06017, -0.06463, -0.00167, -0.208, -0.86443, -0.40688, 0.29546, -0.18775, -0.41337], [0.18725, -0.00093, 0.04257, -0.20144, -0.02148, 0.24404, 0.16877, 0.10806, -0.05732, -0.14979], [-0.12529, -0.00557, 0.05573, -0.22486, -0.1592, 0.01519, -0.64749, -0.44403, -0.20008, 0.47963], [-0.22219, 0.28397, -0.05664, -0.25831, -0.17192, 0.10061, 0.31905, -0.02644, -0.10499, 0.13744], [0.28284, 0.28801, -0.2647, -0.05311, -0.12138, 0.27052, 0.56951, 0.43817, 0.01899, -0.49027], [0.25991, -0.16107, -0.00504, 0.07577, 0.0741, 0.15613, 0.19134, -0.15932, -0.00066, 0.20984], [-0.06156, 0.19652, 0.28321, -0.13029, 0.24506, -0.01575, 0.17418, -0.2714, -0.0698, 0.20106], [0.06116, 0.06592, -0.00562, -0.15807, 0.21222, 0.38509, 0.50929, -0.54635, 0.06144, 0.42256], [-0.57835, 0.0208, -0.06344, -0.0919, 0.25146, -0.48766, -0.45527, 0.30708, 0.22981, 0.36725], [-1.30664, -0.39312, 0.23889, 0.08637, 0.10988, -0.55, -0.33855, -0.2203, 0.22861, 0.17567], [0.09474, 0.26613, 0.01158, 0.27548, 0.20585, 0.22226, 0.10956, 0.23116, -0.04276, 0.0197], [0.20175, -0.20385, -0.08002, 0.2172, 0.16337, -0.2465, -0.22263, -0.18834, 0.21271, 0.24859], [-0.44251, -0.27339, 0.19178, 0.16271, 0.1333, 0.1277, 0.03774, 0.05913, -0.24987, 0.19978], [-0.21674, 0.12316, 0.03639, -0.0018, -0.13252, -0.00934, -0.28465, 0.26417, 0.09844, 0.02794], [0.15042, -0.25379, 0.26535, -0.21657, 0.2116, 0.28308, 0.04883, -0.28399, -0.24211, 0.05485], [-0.09456, -0.23241, 0.26292, 0.16081, 0.06473, 0.20731, 0.13474, -0.1056, 0.08907, 0.12959], [0.16785, 0.20383, 0.17487, -0.02948, -0.07293, -0.08109, 0.26006, 0.03259, -0.01137, 0.22203], [-0.15735, -0.07024, -0.18954, 0.08476, 0.15103, 0.23848, 0.37343, -0.37623, 0.23562, 0.47322], [0.10007, -0.33818, -0.03038, 0.06096, 0.12289, -0.01022, -0.51485, 0.24837, 0.03436, 0.32205], [-1.29038, -0.23958, -0.25313, -0.28151, -0.13231, -0.414, 0.20073, -0.13379, 0.02986, 0.09106], [-0.3058, 0.00834, -0.15564, 0.07318, -0.14504, 0.79229, 0.28232, -0.62861, -0.02209, 0.87722], [-0.40584, -0.2205, 0.24954, -0.0041, -0.18827, -0.10202, 0.14701, 0.02018, 0.20025, 0.24528], [-0.06789, 0.24147, 0.02815, -0.22176, -0.11879, -0.23392, -0.21319, 0.05837, -0.02148, -0.09501], [0.43887, -0.39923, 0.00241, -0.26765, 0.00261, 0.10236, -0.46315, 0.2749, 0.20097, 0.35019], [0.43075, 0.02624, -0.1598, -0.05829, -0.14454, 0.04659, 0.29928, 1.6983, 0.27351, -1.41621], [-0.42571, -0.01296, -0.27232, 0.07743, -0.10816, 0.28946, -0.38655, -0.27014, -0.05436, 0.40526], [0.19942, 0.18386, -0.04108, -0.19617, -0.24454, -0.18119, 0.19363, -0.0804, 0.14807, -0.19866], [0.56487, -0.55144, -0.0634, 0.16991, 0.17218, 0.32005, -0.88473, -0.69552, -0.00369, 0.66752], [-0.35051, 0.22044, -0.22382, -0.24195, -0.28192, 0.071, 0.01983, -0.18523, 0.012, 0.3117], [0.11071, 0.04414, 0.07445, 0.25644, 0.26696, -0.14268, -0.56107, 0.1543, -0.00982, 0.51985], [-0.0232, -0.06103, 0.20584, -0.08363, -0.10367, 0.23407, 0.15018, 0.22492, 0.2399, -0.33986], [0.39888, 0.29205, 0.22325, -0.20463, 0.12177, -0.27552, 0.43464, 0.93571, -0.15195, -1.15373], [0.36475, 0.21517, -0.15558, 0.16324, -0.18732, -0.49665, -0.47586, 0.47201, 0.23128, -0.25879], [0.14609, 0.40751, -0.01552, -0.26315, 0.1379, 0.47406, 0.61022, 0.3163, -0.15347, -0.30933]]", "Weights 2:1": "[-0.20437, 0.04845, 0.0, -0.02526, -0.01283, -0.1317, -0.09487, 0.03064, 0.0, 0.10584]", "Layer 3": {"name": "dense_3", "trainable": true, "dtype": "float32", "units": 2, "activation": "sigmoid", "use_bias": true, "kernel_initializer": {"class_name": "GlorotUniform", "config": {"seed": null}}, "bias_initializer": {"class_name": "Zeros", "config": {}}, "kernel_regularizer": null, "bias_regularizer": null, "activity_regularizer": null, "kernel_constraint": null, "bias_constraint": null}, "Weights 3:0": "[[2.49105, -0.68157], [-0.95419, -1.48095], [-0.34207, -0.05768], [0.58916, -0.28164], [0.24575, 0.5525], [-0.03303, -1.48212], [1.45733, -1.60851], [1.2718, 0.43435], [0.60819, 0.17092], [-1.42011, -0.26588]]", "Weights 3:1": "[-0.27576, 0.97943]"}'

class Neuron:
    def __init__(self, weights, bias, activation):
        self.weights = weights
        self.bias = bias
        self.activation = activation
        self.num_inputs = len(weights)
        self.inputs = np.zeros(self.num_inputs)
        self.Z = 0
        self.A = 0

    @staticmethod
    def sigmoid(x):
        # print(x)
        if x > 100:
            return 1
        if x < -100:
            return 0
        return 1 / (1 + math.exp(-x))

    def evaluate(self, inputs):
        self.inputs = inputs
        self.Z = np.dot(self.weights, inputs) + self.bias
        if self.activation == 'sigmoid':
            self.A = self.sigmoid(self.Z)
        elif self.activation == 'relu':
            self.A = max(0, self.Z)
        else:
            self.A = self.Z
        return self.A


class NeuralNetwork:
    def __init__(self, num_inputs, num_outputs, weights, biases, activations):
        self.num_inputs = num_inputs
        self.num_layers = len(weights)
        self.num_outputs = num_outputs
        self.neurons = []
        self.input_sizes = [num_inputs]
        for layer in range(self.num_layers):
            number_of_neurons = len(weights[layer][0])
            neuron_weights = [[weights[layer][j][i] for j in range(self.input_sizes[-1])] for i in range(number_of_neurons)]
            self.neurons.append([Neuron(neuron_weights[i], biases[layer][i], activations[layer]) for i in range(number_of_neurons)])
            self.input_sizes.append(number_of_neurons)

    def evaluate(self, inputs):
        network_data = [deepcopy(inputs)]
        for layer in range(self.num_layers):
            layer_outputs = []
            for neuron_idx in range(len(self.neurons[layer])):
                layer_outputs.append(self.neurons[layer][neuron_idx].evaluate(network_data[layer]))
            network_data.append(layer_outputs)
        return network_data[-1]

    def print_neuron_config(self):
        for layer in range(len(self.neurons)):
            print('\nLayer ' + str(layer) + ' weights:')
            for neuron in self.neurons[layer]:
                print(neuron.weights)
            print('\nLayer ' + str(layer) + ' biases:')
            print([neuron.bias for neuron in self.neurons[layer]])


# shape is [hidden_layer_1_size, ..., hidden_layer_N_size]
def create_nn_from_json(nn_data):
    data = json.loads(nn_data)
    weights = []
    biases = []
    activations = []
    final_layer = max([int(key.split(' ')[1]) for key in data.keys() if 'Layer' in key])
    num_inputs = data['Layer 0']['batch_input_shape'][1]
    num_outputs = data['Layer ' + str(final_layer)]['units']
    for layer in range(final_layer + 1):
        layer_weights = ast.literal_eval(data['Weights ' + str(layer) + ':0'])
        layer_biases = ast.literal_eval(data['Weights ' + str(layer) + ':1'])
        weights.append(layer_weights)
        biases.append(layer_biases)
        activations.append(data['Layer ' + str(layer)]['activation'])

    nn = NeuralNetwork(num_inputs, num_outputs, weights, biases, activations)
    return nn


# Utility functions
def get_angle(position, target):
    facing = [target[0] - position[0], target[1] - position[1]]
    return math.degrees(math.atan2(facing[1], facing[0]))


def get_relative_angle(target_angle, facing_angle):
    return ((target_angle - facing_angle + 180) % 360) - 180


def get_pythagorean_distance(position, target):
    return math.sqrt((target[0] - position[0]) ** 2 + (target[1] - position[1]) ** 2)


def convert_inputs_to_actions(inputs):
    actions = [(inputs[i] * 36 - 18) if i % 2 == 0 else (inputs[i] * MAX_SPEED) for i in range(len(inputs))]
    return actions


def convert_actions_to_inputs(actions):
    inputs = [(actions[i] / 36 + 0.5) if i % 2 == 0 else (actions[i] / MAX_SPEED) for i in range(len(actions))]
    return inputs


def get_nn_inputs(angle, speed, position, checkpoint, next_checkpoint):
    # 1. angle of the speed
    # 2. magnitude of the speed
    # 3. Angle to next checkpoint
    # 4. Distance to next checkpoint
    # 5. Angle to following checkpoint
    # 6. Distance to following checkpoint
    speed_angle = get_relative_angle(get_angle([0, 0], speed), angle) / 360 + 0.5
    speed_magnitude = convert_distances_to_value_between_0_and_1(get_pythagorean_distance([0, 0], speed))
    checkpoint_angle = get_relative_angle(get_angle(position, checkpoint), angle) / 360 + 0.5
    checkpoint_distance = convert_distances_to_value_between_0_and_1(get_pythagorean_distance(position, checkpoint))
    next_checkpoint_angle = get_relative_angle(get_angle(position, next_checkpoint), angle) / 360 + 0.5
    next_checkpoint_distance = convert_distances_to_value_between_0_and_1(get_pythagorean_distance(position, next_checkpoint))
    return [speed_angle, speed_magnitude, checkpoint_angle, checkpoint_distance, next_checkpoint_angle, next_checkpoint_distance]


def convert_distances_to_value_between_0_and_1(distance):
    value = 1 / (distance / 2000 + 1)
    return value


if __name__ == "__main__":
    checkpoint_count = int(input())  # Count of checkpoints to read
    checkpoints = []
    for i in range(checkpoint_count):
        # checkpoint_x: Position X
        # checkpoint_y: Position Y
        checkpoint_x, checkpoint_y = [int(j) for j in input().split()]
        checkpoints.append([checkpoint_x, checkpoint_y])

    print(checkpoints, file=sys.stderr, flush=True)

    neural_net = create_nn_from_json(nn_data)

    start = True

    # game loop
    while True:
        # checkpoint_index: Index of the checkpoint to lookup in the checkpoints input, initially 0
        # x: Position X
        # y: Position Y
        # vx: horizontal speed. Positive is right
        # vy: vertical speed. Positive is downwards
        # angle: facing angle of this car
        checkpoint_index, x, y, vx, vy, angle = [int(i) for i in input().split()]
        # print([checkpoint_index, x, y, vx, vy, angle], file=sys.stderr, flush=True)
        # print([game.next_checkpoint, game.position[0], game.position[1]], file=sys.stderr, flush=True)
        # game.angle = angle
        # Write an action using print
        # To debug: print("Debug messages...", file=sys.stderr, flush=True)

        # angle = random.randint(-18, 18)
        next_checkpoint = checkpoints[
            checkpoint_index + (1 if checkpoint_index < (len(checkpoints) - 1) else 0)]
        nn_inputs = get_nn_inputs(angle, [vx, vy], [x, y], checkpoints[checkpoint_index], next_checkpoint)
        nn_outputs = neural_net.evaluate(nn_inputs)
        steer, thrust = convert_inputs_to_actions(nn_outputs)

        if start:
            thrust = 100
            start = False

        # X Y THRUST MESSAGE
        print(f"EXPERT {str(round(steer))} {str(round(thrust))}")
